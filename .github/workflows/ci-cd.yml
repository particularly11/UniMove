name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # 前端测试和构建
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run lint
      run: npm run lint
    
    - name: Run type check
      run: npm run type-check
    
    - name: Run tests
      run: npm run test
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: ./frontend/dist
        retention-days: 30

  # 后端测试和构建
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: --health-cmd "mongo --eval 'db.runCommand({ping:1})'" --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run lint
      run: npm run lint
    
    - name: Run type check
      run: npm run type-check
    
    - name: Run tests
      run: npm run test
      env:
        MONGODB_URI: mongodb://localhost:27017/unimove_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build-${{ matrix.node-version }}
        path: ./backend/dist
        retention-days: 30

  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run frontend code analysis
      run: |
        cd frontend
        npm run lint -- --format json --output-file lint-report.json || true
    
    - name: Run backend code analysis
      run: |
        cd backend
        npm run lint -- --format json --output-file lint-report.json || true
    
    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-reports
        path: |
          ./frontend/lint-report.json
          ./backend/lint-report.json
        retention-days: 30

  # 安全扫描
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security audit - Frontend
      run: |
        cd frontend
        npm audit --audit-level moderate
    
    - name: Run security audit - Backend
      run: |
        cd backend
        npm audit --audit-level moderate

  # 部署到staging环境（仅在main分支）
  deploy-staging:
    needs: [frontend, backend, code-quality, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-20.x
        path: ./frontend/dist
    
    - name: Download backend build
      uses: actions/download-artifact@v4
      with:
        name: backend-build-20.x
        path: ./backend/dist
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 这里添加实际的部署脚本
        # 例如：部署到云服务、更新Docker镜像等
    
    - name: Notify deployment
      run: |
        echo "✅ Successfully deployed to staging environment"
        echo "🔗 Staging URL: https://staging.unimove.app"

  # 性能测试
  performance:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    
    - name: Install Lighthouse CLI
      run: npm install -g @lhci/cli@0.12.x
    
    - name: Run Lighthouse tests
      run: |
        # 运行Lighthouse性能测试
        echo "Running performance tests..."
        # lhci autorun --upload.target=temporary-public-storage
    
    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: ./lighthouse-reports
        retention-days: 30
